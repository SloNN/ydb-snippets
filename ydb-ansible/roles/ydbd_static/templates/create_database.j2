#! /bin/sh
# Create the YDB database.
# Parameters:
# * static node fqdn
# * database name
# * initial number of storage groups
# * number of cores per dynnode

set +e
set +u

DB_ENDPOINT=grpcs://"$1":2135
DB_DOMAIN=/{{ ydb_domain }}
DB_POOL={{ ydb_pool_kind }}
CAFILE={{ ydbd_dir }}/certs/ca.crt
TOKEN={{ ydbd_dir }}/home/ydbd-token-file
PASSFILE={{ ydbd_dir }}/certs/secret
DB_NAME="$2"
DB_GROUPS="$3"
DB_CORES="$4"

LD_LIBRARY_PATH={{ ydbd_dir }}/lib
export LD_LIBRARY_PATH

PATH={{ ydbd_dir }}/bin:$PATH
export PATH

set -e
set -u

if [ -f ${PASSFILE} ]; then
  # Username and password are passed in file for reconfiguration.
  . ${PASSFILE}
  ydb --ca-file ${CAFILE} -e ${DB_ENDPOINT} -d ${DB_DOMAIN} \
    auth get-token -f > ${TOKEN}
else
  # Initial cluster setup with empty password
  ydb --ca-file ${CAFILE} -e ${DB_ENDPOINT} -d ${DB_DOMAIN} \
    --user root --no-password auth get-token -f > ${TOKEN}
fi
trap "rm -f ${TOKEN}" EXIT

ydbd --ca-file ${CAFILE} -s ${DB_ENDPOINT} -f ${TOKEN} \
  admin database /{{ ydb_domain }}/${DB_NAME} create ${DB_POOL}:${DB_GROUPS}

CMS_FILE=$HOME/cms-${DB_NAME}.txt
CMS_COOKIE="init-$DB_NAME"
CMS_TENANT="$DB_DOMAIN/$DB_NAME"

cat >${CMS_FILE} <<EOF
ConfigureRequest {
  Actions {
    AddConfigItem {
      ConfigItem {
        Cookie: "$CMS_COOKIE"
        UsageScope: {
          TenantAndNodeTypeFilter {
            Tenant: "$CMS_TENANT"
          }
        }
        Config {
          ActorSystemConfig {
            UseAutoConfig: true
            CpuCount: $DB_CORES
            NodeType: COMPUTE
          }  
        }
        MergeStrategy: 3
      }
    }
  }
}
EOF

ydbd --ca-file ${CAFILE} -s ${DB_ENDPOINT} -f ${TOKEN} \
  admin console execute --domain=${DB_DOMAIN} --retry=10 ${CMS_FILE}

# End Of File